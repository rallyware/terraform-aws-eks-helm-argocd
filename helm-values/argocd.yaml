fullnameOverride: ${fullname_override}

%{ if role_enabled }
controller:
  serviceAccount:
    name: ${controller_sa_name}
    annotations:
      eks.amazonaws.com/role-arn: ${role_arn}
      eks.amazonaws.com/sts-regional-endpoints: "${sts_regional_endpoints}"
%{ endif }

configs:
  cm:
    resource.exclusions: |
      - apiGroups:
        - "velero.io"
        kinds:
        - Backup
        clusters:
        - "*"
    resource.customizations: |
      argoproj.io/Application:
        health.lua: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
          if obj.status ~= nil then
            if obj.status.operationState ~= nil and obj.status.operationState.phase ~= nil then
              if obj.status.operationState.phase == "Succeeded" then
                hs.status = "Healthy"
              elseif obj.status.operationState.phase == "Failed" or obj.status.operationState.phase == "Error" then
                hs.status = "Degraded"
              else
                hs.status = "Progressing"
              end
              if obj.status.operationState.message ~= nil then
                hs.message = obj.status.operationState.message
              end
            end
          end
          return hs
      apps/DaemonSet:
        health.lua: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
          if obj.status ~= nil then
            if obj.status.numberReady ~= nil and obj.status.desiredNumberScheduled ~= nil and obj.status.numberMisscheduled ~= nil then
              if obj.status.numberMisscheduled / obj.status.desiredNumberScheduled >= 0.1 then
                hs.status = "Degraded"
              elseif obj.status.numberReady / obj.status.desiredNumberScheduled >= 0.1 then
                hs.status = "Healthy"
              else
                hs.status = "Progressing"
              end
              hs.message = obj.status.numberReady .. "/" .. obj.status.desiredNumberScheduled .. " pods are ready"
            end
          end
          return hs

      admissionregistration.k8s.io/MutatingWebhookConfiguration:
        ignoreDifferences: |
          jqPathExpressions:
          - '.webhooks[]?.clientConfig.caBundle'

      admissionregistration.k8s.io/ValidatingWebhookConfiguration:
        ignoreDifferences: |
          jqPathExpressions:
          - '.webhooks[]?.clientConfig.caBundle'

      cert-manager.io/Certificate:
        ignoreDifferences: |
          jqPathExpressions:
          - '.spec.duration'
          - '.spec.renewBefore'
          - '.spec.isCA'

%{ if role_enabled }
  serviceAccount:
    name: ${server_sa_name}
    annotations:
      eks.amazonaws.com/role-arn: ${role_arn}
      eks.amazonaws.com/sts-regional-endpoints: "${sts_regional_endpoints}"
%{ endif }
